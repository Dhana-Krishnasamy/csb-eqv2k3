{"version":3,"sources":["NumberFormatCustom.js","index.js"],"names":["NumberFormatCustom","React","props","ref","onChange","other","Object","objectWithoutProperties","react","react_number_format_es","assign","getInputRef","onValueChange","values","target","name","value","thousandSeparator","prefix","displayType","decimalScale","App","_useState","useState","_useState2","slicedToArray","amount","setAmount","_useState3","_useState4","targetSplits","setTargetSplits","_useState5","_useState6","currentSplits","setCurrentSplits","_useState7","_useState8","totalPercent","setTotalPercent","useEffect","reduce","acc","c","onSplitPercentChanges","useCallback","id","e","newtargetSplits","toConsumableArray","Number","onTargetSplitValueChanges","onCurrentSplitValueChanges","handleAddtargetSplits","olstargetSplits","concat","handleRemovetargetSplits","idx","splice","handleAmountChange","react_default","a","createElement","className","Box","sx","& > :not(style)","m","TextField","label","InputProps","inputComponent","variant","FormControl","fullWidth","InputLabel","htmlFor","OutlinedInput","size","disabled","endAdornment","InputAdornment","position","error","map","split","i","splitInAmt","key","toFixed","startAdornment","IconButton","color","onClick","Icon","fontSize","red","aria-label","green","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.b7c1d9d1.chunk.js","sourcesContent":["import * as React from \"react\";\nimport NumberFormat from \"react-number-format\";\n\nconst NumberFormatCustom = React.forwardRef(function NumberFormatCustom(\n  props,\n  ref\n) {\n  const { onChange, ...other } = props;\n\n  return (\n    <NumberFormat\n      {...other}\n      getInputRef={ref}\n      onValueChange={(values) => {\n        onChange({\n          target: {\n            name: props.name,\n            value: values.value\n          }\n        });\n      }}\n      thousandSeparator\n      prefix=\"Â£\"\n      displayType={\"number\"}\n      decimalScale={2}\n    />\n  );\n});\n\nexport default NumberFormatCustom;\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport IconButton from \"@mui/material/IconButton\";\nimport FormControl from \"@mui/material/FormControl\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport OutlinedInput from \"@mui/material/OutlinedInput\";\nimport InputAdornment from \"@mui/material/InputAdornment\";\nimport TextField from \"@mui/material/TextField\";\nimport { green, red } from \"@mui/material/colors\";\nimport Icon from \"@mui/material/Icon\";\nimport \"./styles.css\";\nimport { Box } from \"@mui/material\";\nimport NumberFormatCustom from \"./NumberFormatCustom\";\n\nfunction App() {\n  const [amount, setAmount] = useState(10000);\n  const [targetSplits, setTargetSplits] = useState([20, 30, 50]);\n  const [currentSplits, setCurrentSplits] = useState([]);\n  const [totalPercent, setTotalPercent] = useState(0);\n  useEffect(\n    () => setTotalPercent(targetSplits.reduce((acc, c) => acc + c, 0)),\n    [targetSplits]\n  );\n  const onSplitPercentChanges = useCallback(\n    (id) => (e) => {\n      const newtargetSplits = [...targetSplits];\n      newtargetSplits[id] = Number(e.target.value);\n      setTargetSplits(newtargetSplits);\n    },\n    [targetSplits]\n  );\n  const onTargetSplitValueChanges = useCallback(\n    (id) => (e) => {\n      if (amount > 0) {\n        const { value } = e.target;\n        const newtargetSplits = [...targetSplits];\n        newtargetSplits[id] = Number((value * 100) / amount);\n        setTargetSplits(newtargetSplits);\n      }\n    },\n    [targetSplits, amount]\n  );\n  const onCurrentSplitValueChanges = useCallback(\n    (id) => (e) => {\n      const { value } = e.target;\n      const newtargetSplits = [...currentSplits];\n      newtargetSplits[id] = value;\n      setCurrentSplits(newtargetSplits);\n    },\n    [currentSplits]\n  );\n  const handleAddtargetSplits = useCallback(() => {\n    setTargetSplits((olstargetSplits) => [...olstargetSplits, 0]);\n  }, []);\n\n  const handleRemovetargetSplits = useCallback((idx) => {\n    setTargetSplits((olstargetSplits) => {\n      olstargetSplits.splice(idx, 1);\n      return [...olstargetSplits];\n    });\n  }, []);\n  const handleAmountChange = useCallback(\n    (e) => setAmount(Number(e.target.value)),\n    []\n  );\n  return (\n    <div className=\"App\">\n      <h1>Rebalance Calculator</h1>\n      <Box\n        className=\"split-section\"\n        sx={{\n          \"& > :not(style)\": {\n            m: 1\n          }\n        }}\n      >\n        <TextField\n          label=\"Amount\"\n          value={amount}\n          onChange={handleAmountChange}\n          name=\"numberformat\"\n          id=\"formatted-numberformat-input\"\n          InputProps={{\n            inputComponent: NumberFormatCustom\n          }}\n          variant=\"standard\"\n        />\n      </Box>\n      <Box\n        className=\"split-section\"\n        sx={{\n          \"& > :not(style)\": {\n            m: 1\n          }\n        }}\n      >\n        <FormControl fullWidth sx={{ m: 1 }}>\n          <InputLabel htmlFor=\"total\">Total</InputLabel>\n          <OutlinedInput\n            id=\"total\"\n            size=\"small\"\n            disabled\n            value={totalPercent}\n            endAdornment={<InputAdornment position=\"end\">%</InputAdornment>}\n            label=\"Total\"\n            error={totalPercent > 100}\n          />\n        </FormControl>\n        <FormControl fullWidth sx={{ m: 1 }}>\n          <InputLabel htmlFor=\"Total(Â£)\">Total(Â£)</InputLabel>\n          <OutlinedInput\n            size=\"small\"\n            id=\"Total(Â£)\"\n            label=\"Total(Â£)\"\n            disabled\n            value={(amount * totalPercent) / 100}\n            name=\"numberformat\"\n            inputComponent={NumberFormatCustom}\n            variant=\"standard\"\n          />\n        </FormControl>\n        <FormControl fullWidth sx={{ m: 1 }}>\n          <InputLabel htmlFor=\"balance\">Balance</InputLabel>\n          <OutlinedInput\n            size=\"small\"\n            id=\"balance\"\n            label=\"Balance\"\n            disabled\n            value={amount - (amount * totalPercent) / 100}\n            name=\"numberformat\"\n            inputComponent={NumberFormatCustom}\n            variant=\"standard\"\n          />\n        </FormControl>\n      </Box>\n      {targetSplits.map((split, i) => {\n        const splitInAmt = Number((amount * split) / 100);\n        return (\n          <Box\n            key={i}\n            className=\"split-section\"\n            sx={{\n              \"& > :not(style)\": {\n                m: 1\n              }\n            }}\n          >\n            <FormControl fullWidth sx={{ m: 1 }}>\n              <InputLabel htmlFor=\"outlined-adornment-amount\">\n                {`Stock-${i + 1}`}\n              </InputLabel>\n              <OutlinedInput\n                size=\"small\"\n                id=\"outlined-adornment-amount\"\n                value={split.toFixed(0)}\n                onChange={onSplitPercentChanges(i)}\n                endAdornment={<InputAdornment position=\"end\">%</InputAdornment>}\n                label={`Stock-${i + 1}`}\n                error={totalPercent > 100}\n              />\n            </FormControl>\n\n            <FormControl fullWidth sx={{ m: 1 }}>\n              <InputLabel htmlFor={`amount${i}`}>Â£</InputLabel>\n              <OutlinedInput\n                size=\"small\"\n                id={`amount${i}`}\n                label=\"Â£\"\n                value={splitInAmt}\n                name=\"numberformat\"\n                inputComponent={NumberFormatCustom}\n                variant=\"standard\"\n                onChange={onTargetSplitValueChanges(i)}\n              />\n            </FormControl>\n            <FormControl fullWidth sx={{ m: 1 }}>\n              <InputLabel htmlFor={`currntAmount${i}`}>CurrentÂ£</InputLabel>\n              <OutlinedInput\n                size=\"small\"\n                id={`currntAmount${i}`}\n                label=\"CurrentÂ£\"\n                value={Number(currentSplits[i])}\n                name=\"numberformat\"\n                inputComponent={NumberFormatCustom}\n                variant=\"standard\"\n                onChange={onCurrentSplitValueChanges(i)}\n              />\n            </FormControl>\n            <FormControl fullWidth sx={{ m: 1 }}>\n              <InputLabel htmlFor={`currentPercent${i}`}>Current%</InputLabel>\n              <OutlinedInput\n                size=\"small\"\n                disabled\n                id={`currentPercent${i}`}\n                label=\"Current%\"\n                value={\n                  currentSplits[i]\n                    ? Number((currentSplits[i] * 100) / amount)\n                    : 0\n                }\n                endAdornment={<InputAdornment position=\"end\">%</InputAdornment>}\n              />\n            </FormControl>\n\n            <FormControl fullWidth sx={{ m: 1 }}>\n              <InputLabel htmlFor={`rebalanceAmount${i}`}>Rebalance</InputLabel>\n              <OutlinedInput\n                size=\"small\"\n                disabled\n                id={`rebalanceAmount${i}`}\n                label=\"Rebalance\"\n                value={\n                  splitInAmt - (currentSplits[i] ? Number(currentSplits[i]) : 0)\n                }\n                startAdornment={\n                  <InputAdornment position=\"start\">Â£</InputAdornment>\n                }\n              />\n            </FormControl>\n\n            <IconButton\n              color=\"secondary\"\n              onClick={() => handleRemovetargetSplits(i)}\n            >\n              <Icon fontSize=\"small\" sx={{ color: red[500] }}>\n                remove_circle\n              </Icon>\n            </IconButton>\n          </Box>\n        );\n      })}\n\n      <IconButton\n        color=\"primary\"\n        aria-label=\"add to shopping cart\"\n        onClick={handleAddtargetSplits}\n      >\n        <Icon sx={{ color: green[500] }}>add_circle</Icon>\n      </IconButton>\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}