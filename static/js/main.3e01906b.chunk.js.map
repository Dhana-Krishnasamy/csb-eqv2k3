{"version":3,"sources":["NumberFormatCustom.js","index.js"],"names":["NumberFormatCustom","React","props","ref","onChange","other","Object","objectWithoutProperties","react","react_number_format_es","assign","getInputRef","onValueChange","values","target","name","value","thousandSeparator","prefix","displayType","decimalScale","App","_useState","useState","_useState2","slicedToArray","amount","setAmount","_useState3","_useState4","splits","setSplits","_useState5","_useState6","totalPercent","setTotalPercent","useEffect","reduce","acc","c","onSplitPercentChanges","useCallback","id","e","newSplits","toConsumableArray","Number","onSplitValueChanges","handleAddSplits","olsSplits","concat","handleRemoveSplits","idx","splice","handleAmountChange","react_default","a","createElement","className","Box","sx","& > :not(style)","m","TextField","label","InputProps","inputComponent","variant","FormControl","fullWidth","InputLabel","htmlFor","OutlinedInput","size","disabled","endAdornment","InputAdornment","position","error","map","split","i","key","toFixed","IconButton","color","onClick","Icon","fontSize","red","aria-label","green","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.3e01906b.chunk.js","sourcesContent":["import * as React from \"react\";\nimport NumberFormat from \"react-number-format\";\n\nconst NumberFormatCustom = React.forwardRef(function NumberFormatCustom(\n  props,\n  ref\n) {\n  const { onChange, ...other } = props;\n\n  return (\n    <NumberFormat\n      {...other}\n      getInputRef={ref}\n      onValueChange={(values) => {\n        onChange({\n          target: {\n            name: props.name,\n            value: values.value\n          }\n        });\n      }}\n      thousandSeparator\n      prefix=\"£\"\n      displayType={\"number\"}\n      decimalScale={2}\n    />\n  );\n});\n\nexport default NumberFormatCustom;\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport IconButton from \"@mui/material/IconButton\";\nimport FormControl from \"@mui/material/FormControl\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport OutlinedInput from \"@mui/material/OutlinedInput\";\nimport InputAdornment from \"@mui/material/InputAdornment\";\nimport TextField from \"@mui/material/TextField\";\nimport { green, red } from \"@mui/material/colors\";\nimport Icon from \"@mui/material/Icon\";\nimport \"./styles.css\";\nimport { Box } from \"@mui/material\";\nimport NumberFormatCustom from \"./NumberFormatCustom\";\n\nfunction App() {\n  const [amount, setAmount] = useState(10000);\n  const [splits, setSplits] = useState([20, 30, 50]);\n  const [totalPercent, setTotalPercent] = useState(0);\n  useEffect(() => setTotalPercent(splits.reduce((acc, c) => acc + c, 0)), [\n    splits\n  ]);\n  const onSplitPercentChanges = useCallback(\n    (id) => (e) => {\n      const newSplits = [...splits];\n      newSplits[id] = Number(e.target.value);\n      setSplits(newSplits);\n    },\n    [splits]\n  );\n  const onSplitValueChanges = useCallback(\n    (id) => (e) => {\n      if (amount > 0) {\n        const { value } = e.target;\n        const newSplits = [...splits];\n        newSplits[id] = Number((value * 100) / amount);\n        setSplits(newSplits);\n      }\n    },\n    [splits, amount]\n  );\n  const handleAddSplits = useCallback(() => {\n    setSplits((olsSplits) => [...olsSplits, 0]);\n  }, []);\n\n  const handleRemoveSplits = useCallback((idx) => {\n    setSplits((olsSplits) => {\n      olsSplits.splice(idx, 1);\n      return [...olsSplits];\n    });\n  }, []);\n  const handleAmountChange = useCallback(\n    (e) => setAmount(Number(e.target.value)),\n    []\n  );\n  return (\n    <div className=\"App\">\n      <h1>Rebalance Calculator</h1>\n      <Box\n        className=\"split-section\"\n        sx={{\n          \"& > :not(style)\": {\n            m: 1\n          }\n        }}\n      >\n        <TextField\n          label=\"Amount\"\n          value={amount}\n          onChange={handleAmountChange}\n          name=\"numberformat\"\n          id=\"formatted-numberformat-input\"\n          InputProps={{\n            inputComponent: NumberFormatCustom\n          }}\n          variant=\"standard\"\n        />\n      </Box>\n      <Box\n        className=\"split-section\"\n        sx={{\n          \"& > :not(style)\": {\n            m: 1\n          }\n        }}\n      >\n        <FormControl fullWidth sx={{ m: 1 }}>\n          <InputLabel htmlFor=\"total\">Total</InputLabel>\n          <OutlinedInput\n            id=\"total\"\n            size=\"small\"\n            disabled\n            value={totalPercent}\n            endAdornment={<InputAdornment position=\"end\">%</InputAdornment>}\n            label=\"Total\"\n            error={totalPercent > 100}\n          />\n        </FormControl>\n        <FormControl fullWidth sx={{ m: 1 }}>\n          <InputLabel htmlFor=\"Total(£)\">Total(£)</InputLabel>\n          <OutlinedInput\n            size=\"small\"\n            id=\"Total(£)\"\n            label=\"Total(£)\"\n            disabled\n            value={(amount * totalPercent) / 100}\n            name=\"numberformat\"\n            inputComponent={NumberFormatCustom}\n            variant=\"standard\"\n          />\n        </FormControl>\n        <FormControl fullWidth sx={{ m: 1 }}>\n          <InputLabel htmlFor=\"balance\">Balance</InputLabel>\n          <OutlinedInput\n            size=\"small\"\n            id=\"balance\"\n            label=\"Balance\"\n            disabled\n            value={amount - (amount * totalPercent) / 100}\n            name=\"numberformat\"\n            inputComponent={NumberFormatCustom}\n            variant=\"standard\"\n          />\n        </FormControl>\n      </Box>\n      {splits.map((split, i) => {\n        return (\n          <Box\n            key={i}\n            className=\"split-section\"\n            sx={{\n              \"& > :not(style)\": {\n                m: 1\n              }\n            }}\n          >\n            <FormControl fullWidth sx={{ m: 1 }}>\n              <InputLabel htmlFor=\"outlined-adornment-amount\">\n                {`Stock-${i + 1}`}\n              </InputLabel>\n              <OutlinedInput\n                size=\"small\"\n                id=\"outlined-adornment-amount\"\n                value={split.toFixed(0)}\n                onChange={onSplitPercentChanges(i)}\n                endAdornment={<InputAdornment position=\"end\">%</InputAdornment>}\n                label={`Stock-${i + 1}`}\n                error={totalPercent > 100}\n              />\n            </FormControl>\n\n            <FormControl fullWidth sx={{ m: 1 }}>\n              <InputLabel htmlFor={`amount${i}`}>£</InputLabel>\n              <OutlinedInput\n                size=\"small\"\n                id={`amount${i}`}\n                label=\"£\"\n                value={Number((amount * split) / 100)}\n                name=\"numberformat\"\n                inputComponent={NumberFormatCustom}\n                variant=\"standard\"\n                onChange={onSplitValueChanges(i)}\n              />\n            </FormControl>\n\n            <IconButton color=\"secondary\" onClick={() => handleRemoveSplits(i)}>\n              <Icon fontSize=\"small\" sx={{ color: red[500] }}>\n                remove_circle\n              </Icon>\n            </IconButton>\n          </Box>\n        );\n      })}\n\n      <IconButton\n        color=\"primary\"\n        aria-label=\"add to shopping cart\"\n        onClick={handleAddSplits}\n      >\n        <Icon sx={{ color: green[500] }}>add_circle</Icon>\n      </IconButton>\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}